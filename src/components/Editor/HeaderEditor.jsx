import React, { useState, useEffect, useRef } from 'react';
import { 
  Box, 
  Typography, 
  TextField, 
  Button,
  IconButton,
  Grid,
  Paper,
  Stack,
  useTheme,
  useMediaQuery,
  Collapse,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Divider,
  FormControlLabel,
  Switch,
  Slider
} from '@mui/material';
import { 
  ExpandMore as ExpandMoreIcon,
  ExpandLess as ExpandLessIcon,
  Image as ImageIcon
} from '@mui/icons-material';
import ColorPicker from '../ColorPicker/ColorPicker';
import ConfigLoader from '../ConfigLoader/ConfigLoader';
import { styled } from '@mui/material/styles';
import imageCompression from 'browser-image-compression';
import { imageCacheService } from '../../utils/imageCacheService';
import { headerPresets } from '../../utils/headerPresets';

const ExpandMore = styled((props) => {
  const { expand, ...other } = props;
  return <IconButton {...other} />;
})(({ theme, expand }) => ({
  transform: !expand ? 'rotate(0deg)' : 'rotate(180deg)',
  marginLeft: 'auto',
  transition: theme.transitions.create('transform', {
    duration: theme.transitions.duration.shortest,
  }),
}));

const HeaderEditor = ({ 
  headerData, 
  onHeaderChange,
  sectionsData,
  onSectionsChange,
  heroData,
  contactData,
  expanded,
  onToggle
}) => {
  const [selectedPreset, setSelectedPreset] = useState('');
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('sm'));
  const fileInputRef = useRef(null);
  const [showLanguageWarning, setShowLanguageWarning] = useState(false);
  const [descriptionEditedManually, setDescriptionEditedManually] = useState(false);
  const [titleEditedManually, setTitleEditedManually] = useState(false);


  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Ä–µ–Ω–¥–µ—Ä–µ –∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ siteName
  useEffect(() => {
    if (!headerData.title && headerData.siteName) {
      onHeaderChange({ ...headerData, title: headerData.siteName });
    }
  }, [headerData.siteName]);

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ title –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ siteName
  useEffect(() => {
    if (headerData.siteName && headerData.title !== headerData.siteName) {
      // –ï—Å–ª–∏ title –ø—É—Å—Ç–æ–π –∏–ª–∏ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç siteName, –∏ –Ω–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–ª—Å—è –≤—Ä—É—á–Ω—É—é - –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ
      if ((!headerData.title || headerData.title.trim() === '') && !titleEditedManually) {
        onHeaderChange({ ...headerData, title: headerData.siteName });
        setTitleEditedManually(false); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ —Ä—É—á–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      }
    }
  }, [headerData.siteName]);

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏—è —Å –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–æ–º hero —Å–µ–∫—Ü–∏–∏
  useEffect(() => {
    console.log('üîÑ HeaderEditor: useEffect —Å—Ä–∞–±–æ—Ç–∞–ª, heroData.subtitle:', heroData?.subtitle);
    console.log('üîÑ HeaderEditor: —Ç–µ–∫—É—â–∏–π headerData.description:', headerData?.description);
    console.log('üîÑ HeaderEditor: descriptionEditedManually:', descriptionEditedManually);
    
    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ description –ø—É—Å—Ç–æ–π –∏–ª–∏ –µ—Å–ª–∏ subtitle –∏–∑–º–µ–Ω–∏–ª—Å—è –∏ description –Ω–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–ª—Å—è –≤—Ä—É—á–Ω—É—é
    if (heroData?.subtitle) {
      // –ï—Å–ª–∏ description –ø—É—Å—Ç–æ–π - –∑–∞–ø–æ–ª–Ω—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
      if (!headerData.description || headerData.description.trim() === '') {
        console.log('üîÑ HeaderEditor: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É—é description —Å hero.subtitle (description –ø—É—Å—Ç–æ–π):', heroData.subtitle);
        onHeaderChange({ ...headerData, description: heroData.subtitle });
        setDescriptionEditedManually(false); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ —Ä—É—á–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      }
      // –ï—Å–ª–∏ description –Ω–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–ª—Å—è –≤—Ä—É—á–Ω—É—é - –æ–±–Ω–æ–≤–ª—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
      else if (!descriptionEditedManually) {
        console.log('üîÑ HeaderEditor: –û–±–Ω–æ–≤–ª—è—é description –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ hero.subtitle (–Ω–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–ª–æ—Å—å –≤—Ä—É—á–Ω—É—é):', heroData.subtitle);
        onHeaderChange({ ...headerData, description: heroData.subtitle });
      }
      // –ï—Å–ª–∏ description —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–ª—Å—è –≤—Ä—É—á–Ω—É—é - –Ω–µ —Ç—Ä–æ–≥–∞–µ–º
      else {
        console.log('üîÑ HeaderEditor: –ü—Ä–æ–ø—É—Å–∫–∞—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é - description –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω –≤—Ä—É—á–Ω—É—é:', headerData.description);
      }
    }
  }, [heroData?.subtitle]); // –£–±–∏—Ä–∞–µ–º headerData?.description –∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π

  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è description –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Ä–µ–Ω–¥–µ—Ä–µ
  useEffect(() => {
    console.log('üîÑ HeaderEditor: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è useEffect —Å—Ä–∞–±–æ—Ç–∞–ª');
    console.log('üîÑ HeaderEditor: heroData.subtitle:', heroData?.subtitle);
    console.log('üîÑ HeaderEditor: headerData.description:', headerData.description);
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ description –ø—É—Å—Ç–æ–π –∏ –µ—Å—Ç—å subtitle
    if (heroData?.subtitle && (!headerData.description || headerData.description.trim() === '')) {
      console.log('üîÑ HeaderEditor: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è description —Å hero.subtitle:', heroData.subtitle);
      onHeaderChange({ ...headerData, description: heroData.subtitle });
    }
  }, [heroData?.subtitle]); // –î–æ–±–∞–≤–ª—è–µ–º heroData?.subtitle –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —è–∑—ã–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    return () => {
      const languageValue = typeof headerData.language === 'string' ? headerData.language.trim() : '';
      if (!languageValue) {
        setShowLanguageWarning(true);
        // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –µ—Å–ª–∏ —è–∑—ã–∫ –Ω–µ —É–∫–∞–∑–∞–Ω
        const event = new CustomEvent('preventNavigation', {
          detail: { message: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ–¥ —è–∑—ã–∫–∞ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º' }
        });
        window.dispatchEvent(event);
      }
    };
  }, [headerData.language]);

  // –î–æ–±–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ—Å–µ—Ç–∞ —Å —Ç–µ–∫—É—â–∏–º–∏ —Å—Ç–∏–ª—è–º–∏
  useEffect(() => {
    if (headerData) {
      // –ò—â–µ–º –ø—Ä–µ—Å–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–∫—É—â–∏–º —Å—Ç–∏–ª—è–º
      const matchingPreset = Object.entries(headerPresets).find(([_, preset]) => {
        return preset.titleColor === headerData.titleColor &&
               preset.backgroundColor === headerData.backgroundColor &&
               preset.linksColor === headerData.linksColor &&
               preset.siteBackgroundType === headerData.siteBackgroundType &&
               ((preset.siteBackgroundType === 'solid' && 
                 preset.siteBackgroundColor === headerData.siteBackgroundColor) ||
                (preset.siteBackgroundType === 'gradient' &&
                 preset.siteGradientColor1 === headerData.siteGradientColor1 &&
                 preset.siteGradientColor2 === headerData.siteGradientColor2 &&
                 preset.siteGradientDirection === headerData.siteGradientDirection));
      });

      if (matchingPreset) {
        setSelectedPreset(matchingPreset[0]);
      } else {
        setSelectedPreset('');
      }
    }
  }, [headerData]);

  const handleConfigLoaded = (config) => {
    if (config.header) {
      // –ü—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º title –∏–∑ siteName
      const updatedHeader = {
        ...config.header,
        title: config.header.siteName || config.header.title || ''
      };
      onHeaderChange(updatedHeader);
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ —Ä—É—á–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
      setTitleEditedManually(false);
      setDescriptionEditedManually(false);
    }
  };

  const handleSaveConfig = () => {
    const config = {
      header: headerData
    };
    const blob = new Blob([JSON.stringify(config, null, 2)], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'site-config.json';
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const handleChange = (field, value) => {
    onHeaderChange({ ...headerData, [field]: value });

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–≤—å—é –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    const previewArea = document.querySelector('.preview-area');
    if (previewArea) {
      const backgroundImage = previewArea.querySelector('.background-image');
      if (backgroundImage) {
        if (field === 'siteBackgroundBlur') {
          backgroundImage.style.filter = `blur(${value}px)`;
        } else if (field === 'siteBackgroundDarkness') {
          const overlay = previewArea.querySelector('.site-overlay');
          if (overlay) {
            overlay.style.backgroundColor = `rgba(0, 0, 0, ${value / 100})`;
          }
        }
      }
    }
  };

  const handleFileSelect = async (event) => {
    const file = event.target.files[0];
    if (!file) return;

    try {
      console.log('–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞:', file.name);
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞
      if (!file.type.startsWith('image/')) {
        throw new Error('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ');
      }

      // –°–∂–∞—Ç–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      const compressedFile = await imageCompression(file, {
        maxSizeMB: 1,
        maxWidthOrHeight: 1920,
        useWebWorker: true
      });

      // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ Blob
      const blob = new Blob([compressedFile], { type: 'image/jpeg' });
      
      // –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º fon.jpg –∫–∞–∫ –∏–º—è —Ñ–∞–π–ª–∞
      const filename = 'fon.jpg';

      // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∫—ç—à
      await imageCacheService.saveImage(filename, blob);

      // –°–æ–∑–¥–∞–Ω–∏–µ URL –¥–ª—è –ø—Ä–µ–≤—å—é
      const imageUrl = URL.createObjectURL(blob);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –≤ –¥–∞–Ω–Ω—ã—Ö —à–∞–ø–∫–∏
      onHeaderChange({ 
        ...headerData, 
        siteBackgroundImage: `assets/images/${filename}`
      });

      // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      const imageMetadata = {
        filename,
        type: 'image/jpeg',
        size: blob.size,
        lastModified: new Date().toISOString()
      };

      // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –≤ –∫—ç—à
      await imageCacheService.saveMetadata('siteBackgroundMetadata', imageMetadata);
      console.log('‚úì –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ñ–æ–Ω–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∫—ç—à:', imageMetadata);

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      alert('–§–æ–Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –∫—ç—à');

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ' + error.message);
    }
  };

  const handleFaviconUpload = async (event) => {
    const file = event.target.files[0];
    if (!file) return;

    try {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞
      if (!file.type.startsWith('image/')) {
        throw new Error('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ');
      }

      // –°–∂–∞—Ç–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      const compressedFile = await imageCompression(file, {
        maxSizeMB: 0.1, // Favicon –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∞–ª–µ–Ω—å–∫–∏–º
        maxWidthOrHeight: 32, // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–∞–∑–º–µ—Ä favicon
        useWebWorker: true
      });

      // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ Blob
      const blob = new Blob([compressedFile], { type: 'image/png' });
      
      // –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º Favicon.png –∫–∞–∫ –∏–º—è —Ñ–∞–π–ª–∞
      const filename = 'Favicon.png';

      // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∫–µ—à
      await imageCacheService.saveImage(filename, blob);

      // –°–æ–∑–¥–∞–Ω–∏–µ URL –¥–ª—è –ø—Ä–µ–≤—å—é
      const imageUrl = URL.createObjectURL(blob);

      // –û–±–Ω–æ–≤–ª—è–µ–º favicon –≤ DOM
      const faviconLink = document.querySelector("link[rel*='icon']") || document.createElement('link');
      faviconLink.type = 'image/png';
      faviconLink.rel = 'shortcut icon';
      faviconLink.href = imageUrl;
      document.getElementsByTagName('head')[0].appendChild(faviconLink);

      // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      const imageMetadata = {
        filename,
        type: 'image/png',
        size: blob.size,
        lastModified: new Date().toISOString()
      };

      // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –≤ localStorage
      localStorage.setItem('faviconMetadata', JSON.stringify(imageMetadata));

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      alert('Favicon —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∫–µ—à');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ favicon:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ favicon: ' + error.message);
    }
  };

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —è–∑—ã–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —Å–≤–µ—Ä–Ω—É—Ç—å —Å–µ–∫—Ü–∏—é
  const handleToggle = () => {
    // –ï—Å–ª–∏ —Å–µ–∫—Ü–∏—è —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç—Å—è, –ø—Ä–æ—Å—Ç–æ —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º
    if (!expanded) {
      onToggle();
      return;
    }

    // –ï—Å–ª–∏ —Å–µ–∫—Ü–∏—è —Å–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç—Å—è, –ø—Ä–æ–≤–µ—Ä—è–µ–º —è–∑—ã–∫
    const languageValue = typeof headerData.language === 'string' ? headerData.language.trim() : '';
    if (!languageValue) {
      setShowLanguageWarning(true);
      return;
    }
    setShowLanguageWarning(false);
    onToggle();
  };

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —è–∑—ã–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
  const handleLanguageChange = (e) => {
    const value = e.target.value.toLowerCase().trim();
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–æ–¥ —è–∑—ã–∫–∞ (2 –±—É–∫–≤—ã)
    if (value.length <= 2 && /^[a-z]*$/.test(value)) {
      onHeaderChange({ 
        ...headerData, 
        language: value || null 
      });
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ, –µ—Å–ª–∏ –ø–æ–ª–µ –ø—É—Å—Ç–æ–µ
      setShowLanguageWarning(value === '');
    }
  };

  const handlePresetChange = (presetKey) => {
    if (!presetKey) {
      setSelectedPreset('');
      return;
    }

    setSelectedPreset(presetKey);
    const preset = headerPresets[presetKey];
    onHeaderChange({
      ...headerData,
      titleColor: preset.titleColor,
      backgroundColor: preset.backgroundColor,
      linksColor: preset.linksColor,
      siteBackgroundType: preset.siteBackgroundType,
      ...(preset.siteBackgroundType === 'solid' && {
        siteBackgroundColor: preset.siteBackgroundColor
      }),
      ...(preset.siteBackgroundType === 'gradient' && {
        siteGradientColor1: preset.siteGradientColor1,
        siteGradientColor2: preset.siteGradientColor2,
        siteGradientDirection: preset.siteGradientDirection
      })
    });
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ü–≤–µ—Ç–æ–≤ –±–µ–≥—É—â–µ–π —Å—Ç—Ä–æ–∫–∏ —Å –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏
  const syncRunningLineWithContacts = () => {
    if (!contactData) return;

    const contactTitleColor = contactData.titleColor || '#1565c0';
    let contactBackgroundColor = contactData.backgroundColor || '#ffffff';

    // –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≥—Ä–∞–¥–∏–µ–Ω—Ç, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —Ü–≤–µ—Ç
    if (contactData.backgroundType === 'gradient' && contactData.gradientColor1) {
      contactBackgroundColor = contactData.gradientColor1;
    }

    onHeaderChange({
      ...headerData,
      runningLine: {
        ...headerData.runningLine,
        textColor: contactTitleColor,
        backgroundColor: contactBackgroundColor,
        syncWithContacts: true
      }
    });
  };

  // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ contactData
  useEffect(() => {
    if (headerData.runningLine?.syncWithContacts && contactData) {
      syncRunningLineWithContacts();
    }
  }, [contactData?.titleColor, contactData?.backgroundColor, contactData?.gradientColor1, contactData?.backgroundType]);

  // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
  useEffect(() => {
    if (headerData.runningLine?.syncWithContacts !== false && contactData && headerData.runningLine?.enabled) {
      setTimeout(() => {
        syncRunningLineWithContacts();
      }, 100);
    }
  }, [headerData.runningLine?.syncWithContacts, headerData.runningLine?.enabled]);

  return (
    <Box>
      <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'center', mb: 2 }}>
        <ConfigLoader onConfigLoaded={handleConfigLoaded} />
        
        <Button 
          variant="contained" 
          onClick={handleSaveConfig}
          sx={{ ml: 2, component: 'label', height: '48px' }}
        >
          –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        </Button>
      </Box>

      <Paper sx={{ 
        p: 2, 
        mb: 2,
        backgroundColor: '#f0fff0'
      }}>
        <Box 
          sx={{ 
            display: 'flex', 
            alignItems: 'center',
            cursor: 'pointer'
          }}
          onClick={handleToggle}
        >
          <Typography variant="h6" sx={{ flexGrow: 1 }}>
            –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —à–∞–ø–∫–∏
          </Typography>
          <IconButton onClick={handleToggle} sx={{ transform: expanded ? 'rotate(180deg)' : 'none' }}>
            <ExpandMoreIcon />
          </IconButton>
        </Box>
        
        {showLanguageWarning && (
          <Typography 
            color="error" 
            sx={{ 
              mt: 1, 
              p: 1, 
              backgroundColor: 'rgba(255, 0, 0, 0.1)',
              borderRadius: 1
            }}
          >
            –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ–¥ —è–∑—ã–∫–∞ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
          </Typography>
        )}
        
        <Collapse in={expanded} timeout="auto" unmountOnExit>
          <Box sx={{ p: 2 }}>
            {/* –ì—Ä—É–ø–ø–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è —à–∞–ø–∫–∏ */}
            <Paper sx={{ p: 2, bgcolor: '#e3f2fd', borderRadius: 1, mb: 2, boxShadow: 2 }}>
              <Typography variant="h6" sx={{ mb: 2, color: '#1565c0', borderBottom: '2px solid #1565c0', pb: 1 }}>–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ —à–∞–ø–∫–∏</Typography>
              
              <Grid container spacing={2}>
                <Grid item xs={12}>
                  <TextField
                    fullWidth
                    label="–ù–∞–∑–≤–∞–Ω–∏–µ —Å–∞–π—Ç–∞"
                    value={headerData.siteName}
                    onChange={(e) => {
                      const newSiteName = e.target.value;
                      onHeaderChange({ 
                        ...headerData, 
                        siteName: newSiteName,
                        title: headerData.title === headerData.siteName ? newSiteName : headerData.title
                      });
                    }}
                  />
                </Grid>
                <Grid item xs={12}>
                  <TextField
                    fullWidth
                    label="–î–æ–º–µ–Ω —Å–∞–π—Ç–∞"
                    value={headerData.domain || ''}
                    onChange={(e) => onHeaderChange({ ...headerData, domain: e.target.value.toLowerCase() })}
                    placeholder="example.com"
                    helperText="–£–∫–∞–∂–∏—Ç–µ –¥–æ–º–µ–Ω –≤–∞—à–µ–≥–æ —Å–∞–π—Ç–∞"
                  />
                </Grid>
                <Grid item xs={12}>
                  <Box sx={{ display: 'flex', gap: 1, alignItems: 'flex-start' }}>
                    <TextField
                      fullWidth
                      label="Title"
                      value={headerData.title || headerData.siteName}
                      onChange={(e) => {
                        const newValue = e.target.value;
                        onHeaderChange({ ...headerData, title: newValue });
                        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª —á—Ç–æ-—Ç–æ –æ—Ç–ª–∏—á–Ω–æ–µ –æ—Ç siteName - —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ —Ä—É—á–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                        if (newValue !== headerData.siteName) {
                          setTitleEditedManually(true);
                        }
                      }}
                      placeholder={headerData.siteName}
                      helperText={
                        titleEditedManually
                          ? "–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤—Ä—É—á–Ω—É—é (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞)"
                          : headerData.title === headerData.siteName 
                          ? "–ó–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–∞–π—Ç–∞ (–º–æ–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å)"
                          : "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–∞–π—Ç–∞, –Ω–æ –º–æ–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Ä—É—á–Ω—É—é"
                      }
                      sx={{
                        '& .MuiOutlinedInput-root': {
                          backgroundColor: '#ffffff',
                        }
                      }}
                    />
                    {titleEditedManually && (
                      <Button
                        variant="outlined"
                        size="small"
                        onClick={() => {
                          setTitleEditedManually(false);
                          onHeaderChange({ ...headerData, title: headerData.siteName || '' });
                        }}
                        title="–í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Å–∞–π—Ç–∞"
                        sx={{ 
                          minWidth: 'auto',
                          px: 1,
                          height: '56px',
                          borderColor: '#2e7d32',
                          color: '#2e7d32',
                          '&:hover': {
                            borderColor: '#1b5e20',
                            backgroundColor: 'rgba(46, 125, 50, 0.04)'
                          }
                        }}
                      >
                        üîÑ
                      </Button>
                    )}
                  </Box>
                </Grid>
                <Grid item xs={12}>
                                      <Box sx={{ display: 'flex', gap: 1, alignItems: 'flex-start' }}>
                      <TextField
                        fullWidth
                        label="Description"
                        value={headerData.description || heroData?.subtitle || ""}
                        onChange={(e) => {
                          const newValue = e.target.value;
                          onHeaderChange({ ...headerData, description: newValue });
                          // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª —á—Ç–æ-—Ç–æ –æ—Ç–ª–∏—á–Ω–æ–µ –æ—Ç hero.subtitle - —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ —Ä—É—á–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                          if (newValue !== heroData?.subtitle) {
                            setDescriptionEditedManually(true);
                          }
                        }}
                        multiline
                        rows={2}
                        placeholder="–û–ø–∏—Å–∞–Ω–∏–µ —Å–∞–π—Ç–∞ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ HERO)"
                        helperText={
                          descriptionEditedManually
                            ? "–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤—Ä—É—á–Ω—É—é (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞)"
                            : headerData.description === heroData?.subtitle 
                            ? "–ó–Ω–∞—á–µ–Ω–∏–µ –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ HERO (–º–æ–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å)"
                            : "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ HERO, –Ω–æ –º–æ–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Ä—É—á–Ω—É—é"
                        }
                        sx={{
                          '& .MuiOutlinedInput-root': {
                            backgroundColor: '#ffffff',
                          }
                        }}
                      />
                      {descriptionEditedManually && (
                        <Button
                          variant="outlined"
                          size="small"
                          onClick={() => {
                            setDescriptionEditedManually(false);
                            onHeaderChange({ ...headerData, description: heroData?.subtitle || '' });
                          }}
                          title="–í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å HERO"
                          sx={{ 
                            minWidth: 'auto',
                            px: 1,
                            height: '56px',
                            borderColor: '#2e7d32',
                            color: '#2e7d32',
                            '&:hover': {
                              borderColor: '#1b5e20',
                              backgroundColor: 'rgba(46, 125, 50, 0.04)'
                            }
                          }}
                        >
                          üîÑ
                        </Button>
                      )}
                    </Box>
                </Grid>
                <Grid item xs={12}>
                  <TextField
                    fullWidth
                    label="–ö–æ–¥ —è–∑—ã–∫–∞ (ISO 639-1)"
                    value={typeof headerData.language === 'string' ? headerData.language : ''}
                    onChange={handleLanguageChange}
                    helperText="–í–≤–µ–¥–∏—Ç–µ –¥–≤—É—Ö–±—É–∫–≤–µ–Ω–Ω—ã–π –∫–æ–¥ —è–∑—ã–∫–∞ –ø–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É ISO 639-1"
                    inputProps={{
                      maxLength: 2,
                      pattern: '[a-zA-Z]{2}'
                    }}
                    sx={{
                      '& .MuiOutlinedInput-root': {
                        '& fieldset': {
                          borderColor: 'red',
                        },
                        '&:hover fieldset': {
                          borderColor: 'red',
                        },
                        '&.Mui-focused fieldset': {
                          borderColor: 'red',
                        },
                      },
                      '& .MuiInputLabel-root': {
                        color: 'red',
                        '&.Mui-focused': {
                          color: 'red',
                        },
                        '&.Mui-shrink': {
                          color: 'red',
                        }
                      },
                      '& .MuiHelperText-root': {
                        color: 'red',
                      }
                    }}
                    InputLabelProps={{
                      shrink: true,
                      sx: {
                        position: 'absolute',
                        top: '-8px',
                        left: '14px',
                        backgroundColor: 'white',
                        padding: '0 4px'
                      }
                    }}
                  />
                </Grid>
                <Grid item xs={12} sm={4}>
                  <Box>
                    <Typography variant="body2" sx={{ mb: 1, color: '#1565c0' }}>–¶–≤–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞</Typography>
                    <input
                      type="color"
                      value={headerData.titleColor}
                      onChange={(e) => onHeaderChange({ ...headerData, titleColor: e.target.value })}
                      style={{ width: '100%', height: '40px', borderRadius: '4px' }}
                    />
                  </Box>
                </Grid>
                <Grid item xs={12} sm={4}>
                  <Box>
                    <Typography variant="body2" sx={{ mb: 1, color: '#1565c0' }}>–¶–≤–µ—Ç —Ñ–æ–Ω–∞ —à–∞–ø–∫–∏</Typography>
                    <input
                      type="color"
                      value={headerData.backgroundColor}
                      onChange={(e) => onHeaderChange({ ...headerData, backgroundColor: e.target.value })}
                      style={{ width: '100%', height: '40px', borderRadius: '4px' }}
                    />
                  </Box>
                </Grid>
                <Grid item xs={12} sm={4}>
                  <Box>
                    <Typography variant="body2" sx={{ mb: 1, color: '#1565c0' }}>–¶–≤–µ—Ç —Å—Å—ã–ª–æ–∫</Typography>
                    <input
                      type="color"
                      value={headerData.linksColor}
                      onChange={(e) => onHeaderChange({ ...headerData, linksColor: e.target.value })}
                      style={{ width: '100%', height: '40px', borderRadius: '4px' }}
                    />
                  </Box>
                </Grid>
                <Grid item xs={12}>
                  <Box sx={{ mt: 2 }}>
                    <Button
                      variant="outlined"
                      component="label"
                      startIcon={<ImageIcon />}
                      fullWidth
                    >
                      –ó–∞–≥—Ä—É–∑–∏—Ç—å Favicon
                      <input
                        type="file"
                        hidden
                        accept="image/*"
                        onChange={handleFaviconUpload}
                      />
                    </Button>
                    <Typography variant="caption" sx={{ display: 'block', mt: 1, color: 'text.secondary' }}>
                      –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ä–∞–∑–º–µ—Ä: 32x32 –ø–∏–∫—Å–µ–ª–µ–π, —Ñ–æ—Ä–º–∞—Ç PNG
                    </Typography>
                  </Box>
                </Grid>
              </Grid>
            </Paper>

            {/* –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å—Ç–∏–ª–∏ */}
            <Grid item xs={12}>
              <Paper sx={{ p: 2, bgcolor: '#f5f5f5', borderRadius: 1, mb: 2 }}>
                <Typography variant="subtitle2" sx={{ mb: 2, color: '#1565c0' }}>
                  –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å—Ç–∏–ª–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è
                </Typography>
                <FormControl fullWidth size="small">
                  <InputLabel>–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å</InputLabel>
                  <Select
                    value={selectedPreset}
                    label="–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å"
                    onChange={(e) => handlePresetChange(e.target.value)}
                  >
                    {Object.entries(headerPresets).map(([key, preset]) => (
                      <MenuItem key={key} value={key}>
                        <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
                          <Box
                            sx={{
                              width: 32,
                              height: 32,
                              borderRadius: 1,
                              background: preset.siteBackgroundType === 'gradient'
                                ? `linear-gradient(${preset.siteGradientDirection || 'to right'}, ${preset.siteGradientColor1}, ${preset.siteGradientColor2})`
                                : preset.backgroundColor,
                              border: `2px solid ${preset.titleColor}`
                            }}
                          />
                          <Typography>{preset.name}</Typography>
                        </Box>
                      </MenuItem>
                    ))}
                  </Select>
                </FormControl>
              </Paper>
            </Grid>

            {/* –ì—Ä—É–ø–ø–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ñ–æ–Ω–∞ —Å–∞–π—Ç–∞ */}
            <Paper sx={{ p: 2, bgcolor: '#e8f5e9', borderRadius: 1, boxShadow: 2 }}>
              <Typography variant="h6" sx={{ mb: 2, color: '#2e7d32', borderBottom: '2px solid #2e7d32', pb: 1 }}>–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ —Ñ–æ–Ω–∞ —Å–∞–π—Ç–∞</Typography>
              
              <Grid container spacing={2}>
                <Grid item xs={12}>
                  <FormControl fullWidth>
                    <InputLabel>–¢–∏–ø —Ñ–æ–Ω–∞</InputLabel>
                    <Select
                      value={headerData.siteBackgroundType}
                      onChange={(e) => onHeaderChange({ ...headerData, siteBackgroundType: e.target.value })}
                      label="–¢–∏–ø —Ñ–æ–Ω–∞"
                    >
                      <MenuItem value="solid">–°–ø–ª–æ—à–Ω–æ–π —Ü–≤–µ—Ç</MenuItem>
                      <MenuItem value="gradient">–ì—Ä–∞–¥–∏–µ–Ω—Ç</MenuItem>
                      <MenuItem value="image">–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ</MenuItem>
                    </Select>
                  </FormControl>
                </Grid>

                {headerData.siteBackgroundType === 'solid' && (
                  <Grid item xs={12}>
                    <Box>
                      <Typography variant="body2" sx={{ mb: 1, color: '#2e7d32' }}>–¶–≤–µ—Ç —Ñ–æ–Ω–∞</Typography>
                      <input
                        type="color"
                        value={headerData.siteBackgroundColor}
                        onChange={(e) => onHeaderChange({ ...headerData, siteBackgroundColor: e.target.value })}
                        style={{ width: '100%', height: '40px', borderRadius: '4px' }}
                      />
                    </Box>
                  </Grid>
                )}

                {headerData.siteBackgroundType === 'gradient' && (
                  <>
                    <Grid item xs={12} sm={6}>
                      <Box>
                        <Typography variant="body2" sx={{ mb: 1, color: '#2e7d32' }}>–ü–µ—Ä–≤—ã–π —Ü–≤–µ—Ç –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞</Typography>
                        <input
                          type="color"
                          value={headerData.siteGradientColor1}
                          onChange={(e) => onHeaderChange({ ...headerData, siteGradientColor1: e.target.value })}
                          style={{ width: '100%', height: '40px', borderRadius: '4px' }}
                        />
                      </Box>
                    </Grid>
                    <Grid item xs={12} sm={6}>
                      <Box>
                        <Typography variant="body2" sx={{ mb: 1, color: '#2e7d32' }}>–í—Ç–æ—Ä–æ–π —Ü–≤–µ—Ç –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞</Typography>
                        <input
                          type="color"
                          value={headerData.siteGradientColor2}
                          onChange={(e) => onHeaderChange({ ...headerData, siteGradientColor2: e.target.value })}
                          style={{ width: '100%', height: '40px', borderRadius: '4px' }}
                        />
                      </Box>
                    </Grid>
                    <Grid item xs={12}>
                      <FormControl fullWidth>
                        <InputLabel>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞</InputLabel>
                        <Select
                          value={headerData.siteGradientDirection}
                          onChange={(e) => onHeaderChange({ ...headerData, siteGradientDirection: e.target.value })}
                          label="–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞"
                        >
                          <MenuItem value="to right">–°–ª–µ–≤–∞ –Ω–∞–ø—Ä–∞–≤–æ</MenuItem>
                          <MenuItem value="to left">–°–ø—Ä–∞–≤–∞ –Ω–∞–ª–µ–≤–æ</MenuItem>
                          <MenuItem value="to bottom">–°–≤–µ—Ä—Ö—É –≤–Ω–∏–∑</MenuItem>
                          <MenuItem value="to top">–°–Ω–∏–∑—É –≤–≤–µ—Ä—Ö</MenuItem>
                          <MenuItem value="to bottom right">–ü–æ –¥–∏–∞–≥–æ–Ω–∞–ª–∏</MenuItem>
                        </Select>
                      </FormControl>
                    </Grid>
                  </>
                )}

                {headerData.siteBackgroundType === 'image' && (
                  <>
                    <Grid item xs={12}>
                      <Box sx={{ display: 'flex', gap: 2, alignItems: 'flex-start' }}>
                        <Button
                          variant="contained"
                          startIcon={<ImageIcon />}
                          onClick={() => fileInputRef.current.click()}
                          sx={{ minWidth: '200px' }}
                        >
                          –í—ã–±—Ä–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                        </Button>
                        <input
                          type="file"
                          accept="image/*"
                          style={{ display: 'none' }}
                          ref={fileInputRef}
                          onChange={handleFileSelect}
                        />
                      </Box>
                    </Grid>
                    <Grid item xs={12}>
                      <Box>
                        <Typography variant="body2" sx={{ mb: 1, color: '#2e7d32' }}>–†–∞–∑–º—ã—Ç–∏–µ —Ñ–æ–Ω–∞</Typography>
                        <Slider
                          value={headerData.siteBackgroundBlur || 0}
                          onChange={(e, value) => onHeaderChange({ ...headerData, siteBackgroundBlur: value })}
                          min={0}
                          max={20}
                          step={1}
                          valueLabelDisplay="auto"
                          sx={{ color: '#2e7d32' }}
                        />
                      </Box>
                    </Grid>
                    <Grid item xs={12}>
                      <Box>
                        <Typography variant="body2" sx={{ mb: 1, color: '#2e7d32' }}>–ó–∞—Ç–µ–º–Ω–µ–Ω–∏–µ —Ñ–æ–Ω–∞</Typography>
                        <Slider
                          value={headerData.siteBackgroundDarkness || 0}
                          onChange={(e, value) => onHeaderChange({ ...headerData, siteBackgroundDarkness: value })}
                          min={0}
                          max={100}
                          step={5}
                          valueLabelDisplay="auto"
                          sx={{ color: '#2e7d32' }}
                        />
                      </Box>
                    </Grid>
                  </>
                )}
              </Grid>
            </Paper>

            {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–≥—É—â–µ–π —Å—Ç—Ä–æ–∫–∏ */}
            <Paper sx={{ p: 2, bgcolor: '#fff3e0', borderRadius: 1, boxShadow: 2, mt: 2 }}>
              <Typography variant="h6" sx={{ mb: 2, color: '#e65100', borderBottom: '2px solid #e65100', pb: 1 }}>
                –ë–µ–≥—É—â–∞—è —Å—Ç—Ä–æ–∫–∞
              </Typography>
              
              <Grid container spacing={2}>
                <Grid item xs={12}>
                  <FormControlLabel
                    control={
                      <Switch
                        checked={headerData.runningLine?.enabled || false}
                        onChange={(e) => onHeaderChange({
                          ...headerData,
                          runningLine: {
                            ...headerData.runningLine,
                            enabled: e.target.checked
                          }
                        })}
                      />
                    }
                    label="–í–∫–ª—é—á–∏—Ç—å –±–µ–≥—É—â—É—é —Å—Ç—Ä–æ–∫—É"
                  />
                </Grid>
                
                {headerData.runningLine?.enabled && (
                  <>
                    <Grid item xs={12}>
                      <FormControlLabel
                        control={
                                                  <Switch
                          checked={headerData.runningLine?.syncWithContacts !== false}
                          onChange={(e) => {
                              const syncEnabled = e.target.checked;
                              onHeaderChange({
                                ...headerData,
                                runningLine: {
                                  ...headerData.runningLine,
                                  syncWithContacts: syncEnabled
                                }
                              });
                              if (syncEnabled) {
                                // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Ü–≤–µ—Ç–∞ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏
                                setTimeout(() => syncRunningLineWithContacts(), 100);
                              }
                            }}
                          />
                        }
                        label="–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ü–≤–µ—Ç–∞ —Å —Ä–∞–∑–¥–µ–ª–æ–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"
                        sx={{ mb: 2 }}
                      />
                      {headerData.runningLine?.syncWithContacts && (
                        <Box sx={{ p: 2, bgcolor: '#e3f2fd', borderRadius: 1, border: '1px solid #2196f3' }}>
                          <Typography variant="body2" sx={{ color: '#1976d2' }}>
                            üí° –¶–≤–µ—Ç–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É—é—Ç—Å—è —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
                            <br />
                            ‚Ä¢ –¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ ‚Üê –¶–≤–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
                            <br />
                            ‚Ä¢ –¶–≤–µ—Ç —Ñ–æ–Ω–∞ ‚Üê –¶–≤–µ—Ç —Ñ–æ–Ω–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
                          </Typography>
                        </Box>
                      )}
                    </Grid>
                    
                    <Grid item xs={12}>
                      <TextField
                        fullWidth
                        label="–¢–µ–∫—Å—Ç –±–µ–≥—É—â–µ–π —Å—Ç—Ä–æ–∫–∏"
                        value={headerData.runningLine?.text || ''}
                        onChange={(e) => {
                          const newText = e.target.value;
                          onHeaderChange({
                            ...headerData,
                            runningLine: {
                              ...headerData.runningLine,
                              text: newText,
                              enabled: newText.trim() !== '' // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–∫–ª—é—á–∞–µ–º –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –ø—É—Å—Ç–æ–π
                            }
                          });
                        }}
                        placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –±–µ–≥—É—â–µ–π —Å—Ç—Ä–æ–∫–∏"
                        helperText="–¢–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –¥–≤–∏–≥–∞—Ç—å—Å—è –≤ –±–µ–≥—É—â–µ–π —Å—Ç—Ä–æ–∫–µ"
                      />
                    </Grid>
                    
                    <Grid item xs={12} sm={6}>
                      <Box>
                        <Typography variant="body2" sx={{ mb: 1, color: '#e65100' }}>
                          –°–∫–æ—Ä–æ—Å—Ç—å –¥–≤–∏–∂–µ–Ω–∏—è (—Å–µ–∫—É–Ω–¥—ã)
                        </Typography>
                        <Slider
                          value={headerData.runningLine?.speed || 25}
                          onChange={(e, value) => onHeaderChange({
                            ...headerData,
                            runningLine: {
                              ...headerData.runningLine,
                              speed: value
                            }
                          })}
                          min={10}
                          max={100}
                          step={5}
                          marks={[
                            { value: 10, label: '10—Å' },
                            { value: 25, label: '25—Å' },
                            { value: 50, label: '50—Å' },
                            { value: 100, label: '100—Å' }
                          ]}
                          valueLabelDisplay="auto"
                          sx={{ color: '#e65100' }}
                        />
                      </Box>
                    </Grid>
                    
                    <Grid item xs={12} sm={6}>
                      <FormControl fullWidth>
                        <InputLabel>–†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞</InputLabel>
                        <Select
                          value={headerData.runningLine?.fontSize || '24px'}
                          onChange={(e) => onHeaderChange({
                            ...headerData,
                            runningLine: {
                              ...headerData.runningLine,
                              fontSize: e.target.value
                            }
                          })}
                          label="–†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞"
                        >
                          <MenuItem value="12px">12px - –ú–∞–ª–µ–Ω—å–∫–∏–π</MenuItem>
                          <MenuItem value="14px">14px - –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π</MenuItem>
                          <MenuItem value="16px">16px - –°—Ä–µ–¥–Ω–∏–π</MenuItem>
                          <MenuItem value="18px">18px - –ë–æ–ª—å—à–æ–π</MenuItem>
                          <MenuItem value="20px">20px - –û—á–µ–Ω—å –±–æ–ª—å—à–æ–π</MenuItem>
                          <MenuItem value="22px">22px - –ö—Ä—É–ø–Ω—ã–π</MenuItem>
                          <MenuItem value="24px">24px - –ì–∏–≥–∞–Ω—Ç—Å–∫–∏–π</MenuItem>
                        </Select>
                      </FormControl>
                    </Grid>
                    
                    <Grid item xs={12} sm={6}>
                      <Box>
                        <Typography variant="body2" sx={{ mb: 1, color: headerData.runningLine?.syncWithContacts ? '#9e9e9e' : '#e65100' }}>
                          –¶–≤–µ—Ç —Ñ–æ–Ω–∞ –±–µ–≥—É—â–µ–π —Å—Ç—Ä–æ–∫–∏
                          {headerData.runningLine?.syncWithContacts && ' (—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤–∫–ª—é—á–µ–Ω–∞)'}
                        </Typography>
                        <input
                          type="color"
                          value={headerData.runningLine?.backgroundColor || '#1976d2'}
                          onChange={(e) => onHeaderChange({
                            ...headerData,
                            runningLine: {
                              ...headerData.runningLine,
                              backgroundColor: e.target.value,
                              syncWithContacts: false // –û—Ç–∫–ª—é—á–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –ø—Ä–∏ —Ä—É—á–Ω–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏
                            }
                          })}
                          disabled={headerData.runningLine?.syncWithContacts}
                          style={{ 
                            width: '100%', 
                            height: '40px', 
                            borderRadius: '4px',
                            opacity: headerData.runningLine?.syncWithContacts ? 0.5 : 1
                          }}
                        />
                      </Box>
                    </Grid>
                    
                    <Grid item xs={12} sm={6}>
                      <Box>
                        <Typography variant="body2" sx={{ mb: 1, color: headerData.runningLine?.syncWithContacts ? '#9e9e9e' : '#e65100' }}>
                          –¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ –±–µ–≥—É—â–µ–π —Å—Ç—Ä–æ–∫–∏
                          {headerData.runningLine?.syncWithContacts && ' (—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤–∫–ª—é—á–µ–Ω–∞)'}
                        </Typography>
                        <input
                          type="color"
                          value={headerData.runningLine?.textColor || '#ffffff'}
                          onChange={(e) => onHeaderChange({
                            ...headerData,
                            runningLine: {
                              ...headerData.runningLine,
                              textColor: e.target.value,
                              syncWithContacts: false // –û—Ç–∫–ª—é—á–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –ø—Ä–∏ —Ä—É—á–Ω–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏
                            }
                          })}
                          disabled={headerData.runningLine?.syncWithContacts}
                          style={{ 
                            width: '100%', 
                            height: '40px', 
                            borderRadius: '4px',
                            opacity: headerData.runningLine?.syncWithContacts ? 0.5 : 1
                          }}
                        />
                      </Box>
                    </Grid>
                    
                    <Grid item xs={12} sm={6}>
                      <FormControl fullWidth>
                        <InputLabel>–ù–∞—á–µ—Ä—Ç–∞–Ω–∏–µ —à—Ä–∏—Ñ—Ç–∞</InputLabel>
                        <Select
                          value={headerData.runningLine?.fontWeight || 'bold'}
                          onChange={(e) => onHeaderChange({
                            ...headerData,
                            runningLine: {
                              ...headerData.runningLine,
                              fontWeight: e.target.value
                            }
                          })}
                          label="–ù–∞—á–µ—Ä—Ç–∞–Ω–∏–µ —à—Ä–∏—Ñ—Ç–∞"
                        >
                          <MenuItem value="normal">–û–±—ã—á–Ω—ã–π</MenuItem>
                          <MenuItem value="bold">–ñ–∏—Ä–Ω—ã–π</MenuItem>
                          <MenuItem value="lighter">–°–≤–µ—Ç–ª—ã–π</MenuItem>
                          <MenuItem value="600">–ü–æ–ª—É–∂–∏—Ä–Ω—ã–π</MenuItem>
                          <MenuItem value="800">–û—á–µ–Ω—å –∂–∏—Ä–Ω—ã–π</MenuItem>
                        </Select>
                      </FormControl>
                    </Grid>
                    
                    <Grid item xs={12} sm={6}>
                      <FormControl fullWidth>
                        <InputLabel>–°–µ–º–µ–π—Å—Ç–≤–æ —à—Ä–∏—Ñ—Ç–æ–≤</InputLabel>
                        <Select
                          value={headerData.runningLine?.fontFamily || "'Comic Sans MS', cursive"}
                          onChange={(e) => onHeaderChange({
                            ...headerData,
                            runningLine: {
                              ...headerData.runningLine,
                              fontFamily: e.target.value
                            }
                          })}
                          label="–°–µ–º–µ–π—Å—Ç–≤–æ —à—Ä–∏—Ñ—Ç–æ–≤"
                        >
                          <MenuItem value="system-ui">–°–∏—Å—Ç–µ–º–Ω—ã–π (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)</MenuItem>
                          <MenuItem value="Arial, sans-serif">Arial - –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π</MenuItem>
                          <MenuItem value="'Helvetica Neue', sans-serif">Helvetica - –≠–ª–µ–≥–∞–Ω—Ç–Ω—ã–π</MenuItem>
                          <MenuItem value="'Times New Roman', serif">Times - –°—Ç—Ä–æ–≥–∏–π</MenuItem>
                          <MenuItem value="'Courier New', monospace">Courier - –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π</MenuItem>
                          <MenuItem value="'Comic Sans MS', cursive">Comic Sans - –î—Ä—É–∂–µ–ª—é–±–Ω—ã–π</MenuItem>
                          <MenuItem value="Impact, sans-serif">Impact - –ú–æ—â–Ω—ã–π</MenuItem>
                          <MenuItem value="'Brush Script MT', cursive">Brush Script - –•—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π</MenuItem>
                        </Select>
                      </FormControl>
                    </Grid>
                    
                    <Grid item xs={12}>
                      <FormControl fullWidth>
                        <InputLabel>–°—Ç–∏–ª—å —Ç–µ–∫—Å—Ç–∞</InputLabel>
                        <Select
                          value={headerData.runningLine?.textStyle || '3d'}
                          onChange={(e) => onHeaderChange({
                            ...headerData,
                            runningLine: {
                              ...headerData.runningLine,
                              textStyle: e.target.value
                            }
                          })}
                          label="–°—Ç–∏–ª—å —Ç–µ–∫—Å—Ç–∞"
                        >
                          <MenuItem value="normal">–û–±—ã—á–Ω—ã–π</MenuItem>
                          <MenuItem value="shadow">–° —Ç–µ–Ω—å—é</MenuItem>
                          <MenuItem value="outline">–° –æ–±–≤–æ–¥–∫–æ–π</MenuItem>
                          <MenuItem value="glow">–°–≤–µ—Ç—è—â–∏–π—Å—è</MenuItem>
                          <MenuItem value="3d">3D —ç—Ñ—Ñ–µ–∫—Ç (—É–º–Ω—ã–π)</MenuItem>
                          <MenuItem value="3d-classic">3D –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π</MenuItem>
                          <MenuItem value="3d-bold">3D –∂–∏—Ä–Ω—ã–π</MenuItem>
                          <MenuItem value="3d-neon">3D –Ω–µ–æ–Ω–æ–≤—ã–π</MenuItem>
                          <MenuItem value="gradient">–ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π</MenuItem>
                        </Select>
                      </FormControl>
                      {(headerData.runningLine?.textStyle === '3d' || 
                        headerData.runningLine?.textStyle === '3d-classic' || 
                        headerData.runningLine?.textStyle === '3d-bold' || 
                        headerData.runningLine?.textStyle === '3d-neon') && (
                        <Box sx={{ p: 2, mt: 1, bgcolor: '#e8f5e8', borderRadius: 1, border: '1px solid #4caf50' }}>
                          <Typography variant="body2" sx={{ color: '#2e7d32', fontWeight: 'bold' }}>
                            üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤—ã–±–æ—Ä—É 3D —ç—Ñ—Ñ–µ–∫—Ç–∞:
                          </Typography>
                          <Typography variant="body2" sx={{ color: '#2e7d32', mt: 1 }}>
                            ‚Ä¢ <strong>3D —É–º–Ω—ã–π</strong> - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–±–∏—Ä–∞–µ—Ç —Ü–≤–µ—Ç–∞ –¥–ª—è –ª—é–±–æ–≥–æ —Ñ–æ–Ω–∞
                            <br />
                            ‚Ä¢ <strong>3D –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π</strong> - —Å–µ—Ä–∞—è —Ç–µ–Ω—å, –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Å–≤–µ—Ç–ª—ã—Ö —Ñ–æ–Ω–æ–≤
                            <br />
                            ‚Ä¢ <strong>3D –∂–∏—Ä–Ω—ã–π</strong> - –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–∞—è –æ–±–≤–æ–¥–∫–∞, –¥–ª—è —è—Ä–∫–∏—Ö —Ü–≤–µ—Ç–æ–≤
                            <br />
                            ‚Ä¢ <strong>3D –Ω–µ–æ–Ω–æ–≤—ã–π</strong> - —Å–≤–µ—á–µ–Ω–∏–µ + —Ç–µ–Ω—å, –¥–ª—è —Ç–µ–º–Ω—ã—Ö —Ñ–æ–Ω–æ–≤
                          </Typography>
                        </Box>
                      )}
                    </Grid>
                    
                    <Grid item xs={12} sm={6}>
                      <Box>
                        <Typography variant="body2" sx={{ mb: 1, color: '#e65100' }}>
                          –í—ã—Å–æ—Ç–∞ —Å—Ç—Ä–æ–∫–∏
                        </Typography>
                        <Slider
                          value={parseFloat(headerData.runningLine?.lineHeight || '1.2')}
                          onChange={(e, value) => onHeaderChange({
                            ...headerData,
                            runningLine: {
                              ...headerData.runningLine,
                              lineHeight: value.toString()
                            }
                          })}
                          min={1.0}
                          max={2.0}
                          step={0.1}
                          marks={[
                            { value: 1.0, label: '1.0' },
                            { value: 1.2, label: '1.2' },
                            { value: 1.5, label: '1.5' },
                            { value: 2.0, label: '2.0' }
                          ]}
                          valueLabelDisplay="auto"
                          sx={{ color: '#e65100' }}
                        />
                      </Box>
                    </Grid>
                    
                    <Grid item xs={12} sm={6}>
                      <Box>
                        <Typography variant="body2" sx={{ mb: 1, color: '#e65100' }}>
                          –û—Ç—Å—Ç—É–ø—ã (padding)
                        </Typography>
                        <Slider
                          value={parseInt(headerData.runningLine?.padding || '6')}
                          onChange={(e, value) => onHeaderChange({
                            ...headerData,
                            runningLine: {
                              ...headerData.runningLine,
                              padding: value.toString()
                            }
                          })}
                          min={4}
                          max={20}
                          step={1}
                          marks={[
                            { value: 4, label: '4px' },
                            { value: 8, label: '8px' },
                            { value: 12, label: '12px' },
                            { value: 20, label: '20px' }
                          ]}
                          valueLabelDisplay="auto"
                          sx={{ color: '#e65100' }}
                        />
                      </Box>
                    </Grid>
                  </>
                )}
              </Grid>
            </Paper>
          </Box>
        </Collapse>
      </Paper>
    </Box>
  );
};

export default HeaderEditor; 