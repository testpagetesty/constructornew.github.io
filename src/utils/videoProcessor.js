/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ
 * –í–∫–ª—é—á–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å—Ç–±–µ–∫–∞ (–ª–æ–≥–æ—Ç–∏–ø–∞) –∏–∑ –≤–∏–¥–µ–æ
 */

class VideoProcessor {
  constructor() {
    this.canvas = null;
    this.ctx = null;
    this.video = null;
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è canvas –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ
   */
  initCanvas() {
    if (!this.canvas) {
      this.canvas = document.createElement('canvas');
      this.ctx = this.canvas.getContext('2d');
    }
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
   */
  createVideoElement() {
    if (!this.video) {
      this.video = document.createElement('video');
      this.video.muted = true;
      this.video.playsInline = true;
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å—Ç–±–µ–∫–∞
   * @param {File|Blob} videoFile - –∏—Å—Ö–æ–¥–Ω—ã–π –≤–∏–¥–µ–æ —Ñ–∞–π–ª
   * @param {Object} options - –æ–ø—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
   * @param {number} options.cropBottom - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∏–∫—Å–µ–ª–µ–π –¥–ª—è –æ–±—Ä–µ–∑–∫–∏ —Å–Ω–∏–∑—É (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 60)
   * @param {number} options.cropRight - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∏–∫—Å–µ–ª–µ–π –¥–ª—è –æ–±—Ä–µ–∑–∫–∏ —Å–ø—Ä–∞–≤–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 60)
   * @param {number} options.cropTop - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∏–∫—Å–µ–ª–µ–π –¥–ª—è –æ–±—Ä–µ–∑–∫–∏ —Å–≤–µ—Ä—Ö—É (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0)
   * @param {number} options.cropLeft - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∏–∫—Å–µ–ª–µ–π –¥–ª—è –æ–±—Ä–µ–∑–∫–∏ —Å–ª–µ–≤–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0)
   * @returns {Promise<Blob>} - –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –≤–∏–¥–µ–æ
   */
  async processVideoForPostback(videoFile, options = {}) {
    const {
      cropBottom = 60,    // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ–±—Ä–µ–∑–∞–µ–º 60px —Å–Ω–∏–∑—É
      cropRight = 60,     // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ–±—Ä–µ–∑–∞–µ–º 60px —Å–ø—Ä–∞–≤–∞
      cropTop = 0,        // –°–≤–µ—Ä—Ö—É –Ω–µ –æ–±—Ä–µ–∑–∞–µ–º
      cropLeft = 0        // –°–ª–µ–≤–∞ –Ω–µ –æ–±—Ä–µ–∑–∞–µ–º
    } = options;

    return new Promise((resolve, reject) => {
      try {
        this.createVideoElement();
        this.initCanvas();

        const videoUrl = URL.createObjectURL(videoFile);
        
        this.video.onloadedmetadata = () => {
          const originalWidth = this.video.videoWidth;
          const originalHeight = this.video.videoHeight;
          
          // –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã –ø–æ—Å–ª–µ –æ–±—Ä–µ–∑–∫–∏
          const newWidth = originalWidth - cropLeft - cropRight;
          const newHeight = originalHeight - cropTop - cropBottom;
          
          // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã canvas
          this.canvas.width = newWidth;
          this.canvas.height = newHeight;
          
          console.log(`üé¨ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ: ${originalWidth}x${originalHeight} ‚Üí ${newWidth}x${newHeight}`);
          console.log(`‚úÇÔ∏è –û–±—Ä–µ–∑–∫–∞: –≤–µ—Ä—Ö=${cropTop}, –Ω–∏–∑=${cropBottom}, –ª–µ–≤–æ=${cropLeft}, –ø—Ä–∞–≤–æ=${cropRight}`);
          
          // –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–∞–¥—Ä–æ–≤
          this.processVideoFrames(videoUrl, newWidth, newHeight, cropLeft, cropTop, resolve, reject);
        };
        
        this.video.onerror = () => {
          reject(new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ'));
        };
        
        this.video.src = videoUrl;
        this.video.load();
        
      } catch (error) {
        reject(error);
      }
    });
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–¥—Ä–æ–≤ –≤–∏–¥–µ–æ
   */
  async processVideoFrames(videoUrl, newWidth, newHeight, cropLeft, cropTop, resolve, reject) {
    try {
      const mediaRecorder = new MediaRecorder(this.canvas.captureStream(30), {
        mimeType: 'video/webm;codecs=vp9'
      });
      
      const chunks = [];
      
      mediaRecorder.ondataavailable = (event) => {
        if (event.data.size > 0) {
          chunks.push(event.data);
        }
      };
      
      mediaRecorder.onstop = () => {
        const processedVideo = new Blob(chunks, { type: 'video/webm' });
        console.log(`‚úÖ –í–∏–¥–µ–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${processedVideo.size} –±–∞–π—Ç`);
        resolve(processedVideo);
      };
      
      mediaRecorder.start();
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∏–¥–µ–æ –ø–æ –∫–∞–¥—Ä–∞–º
      this.video.currentTime = 0;
      this.video.play();
      
      const processFrame = () => {
        if (this.video.ended || this.video.paused) {
          mediaRecorder.stop();
          return;
        }
        
        // –†–∏—Å—É–µ–º –∫–∞–¥—Ä —Å –æ–±—Ä–µ–∑–∫–æ–π
        this.ctx.drawImage(
          this.video,
          cropLeft, cropTop, newWidth, newHeight,  // –∏—Å—Ç–æ—á–Ω–∏–∫ (—Å –æ–±—Ä–µ–∑–∫–æ–π)
          0, 0, newWidth, newHeight                 // –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ (–ø–æ–ª–Ω—ã–π canvas)
        );
        
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
        requestAnimationFrame(processFrame);
      };
      
      processFrame();
      
    } catch (error) {
      reject(error);
    }
  }

  /**
   * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±–ª–∞—Å—Ç–∏ –ø–æ—Å—Ç–±–µ–∫–∞ –∏ –µ–≥–æ —É–¥–∞–ª–µ–Ω–∏–µ
   * @param {File|Blob} videoFile - –∏—Å—Ö–æ–¥–Ω—ã–π –≤–∏–¥–µ–æ —Ñ–∞–π–ª
   * @returns {Promise<Blob>} - –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –≤–∏–¥–µ–æ
   */
  async autoRemovePostback(videoFile) {
    // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–µ–∑–∫–∏
    // –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã —É–±—Ä–∞—Ç—å –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –ø–æ—Å—Ç–±–µ–∫–æ–≤
    return this.processVideoForPostback(videoFile, {
      cropBottom: 80,   // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –æ–±—Ä–µ–∑–∫—É —Å–Ω–∏–∑—É –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
      cropRight: 80,    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –æ–±—Ä–µ–∑–∫—É —Å–ø—Ä–∞–≤–∞ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
      cropTop: 0,
      cropLeft: 0
    });
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ
   * @param {File|Blob} videoFile - –≤–∏–¥–µ–æ —Ñ–∞–π–ª
   * @returns {Promise<Object>} - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∏–¥–µ–æ
   */
  async getVideoInfo(videoFile) {
    return new Promise((resolve, reject) => {
      this.createVideoElement();
      
      const videoUrl = URL.createObjectURL(videoFile);
      
      this.video.onloadedmetadata = () => {
        const info = {
          width: this.video.videoWidth,
          height: this.video.videoHeight,
          duration: this.video.duration,
          size: videoFile.size,
          type: videoFile.type
        };
        
        URL.revokeObjectURL(videoUrl);
        resolve(info);
      };
      
      this.video.onerror = () => {
        URL.revokeObjectURL(videoUrl);
        reject(new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ'));
      };
      
      this.video.src = videoUrl;
      this.video.load();
    });
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
   */
  cleanup() {
    if (this.video) {
      this.video.src = '';
      this.video = null;
    }
    if (this.canvas) {
      this.canvas = null;
      this.ctx = null;
    }
  }
}

export const videoProcessor = new VideoProcessor();
