import { REQUEST_CONFIGS } from '../config/openai.js';

class OpenAIService {
  constructor() {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π API —Ä–æ—É—Ç –≤–º–µ—Å—Ç–æ –ø—Ä—è–º–æ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ OpenAI
    this.apiUrl = '/api/openai';
  }

  /**
   * –ë–∞–∑–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –∫ OpenAI API —Å retry –ª–æ–≥–∏–∫–æ–π
   * @param {string} prompt - –ü—Ä–æ–º–ø—Ç –¥–ª—è AI
   * @param {string} type - –¢–∏–ø –∑–∞–ø—Ä–æ—Å–∞ (FULL_SITE, SECTION, LEGAL)
   * @param {number} retryCount - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 3)
   * @returns {Promise<string>} - –û—Ç–≤–µ—Ç –æ—Ç AI
   */
  async sendRequest(prompt, type = 'SECTION', retryCount = 3) {
    const config = REQUEST_CONFIGS[type] || REQUEST_CONFIGS.SECTION;
    
    try {
      console.log('üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ OpenAI...', { type, promptLength: prompt.length });
      
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), config.timeout);

      const response = await fetch(this.apiUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          prompt: prompt,
          type: type
        }),
        signal: controller.signal
      });

      clearTimeout(timeoutId);

      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        throw new Error(`API Error: ${response.status} - ${errorData.details || errorData.error || 'Unknown error'}`);
      }

      const data = await response.json();
      
      if (!data.success || !data.content) {
        throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç API');
      }

      const result = data.content.trim();
      console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç OpenAI', { 
        responseLength: result.length,
        tokensUsed: data.usage?.total_tokens || 'N/A'
      });

      return result;

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ OpenAI:', error);
      
      // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ 500 (—Å–µ—Ä–≤–µ—Ä–Ω–∞—è) –∏–ª–∏ 408 (—Ç–∞–π–º-–∞—É—Ç) –∏ –µ—Å—Ç—å –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–≤—Ç–æ—Ä–∞
      if ((error.message.includes('500') || error.message.includes('408')) && retryCount > 0) {
        console.log(`üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞... –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: ${retryCount - 1}`);
        await new Promise(resolve => setTimeout(resolve, 3000)); // –ñ–¥–µ–º 3 —Å–µ–∫—É–Ω–¥—ã
        return this.sendRequest(prompt, type, retryCount - 1);
      }
      
      if (error.name === 'AbortError') {
        throw new Error('–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ —É–º–µ–Ω—å—à–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –ø—Ä–æ–º–ø—Ç–∞.');
      }
      
      if (error.message.includes('408')) {
        throw new Error('–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –∏—Å—Ç–µ–∫–ª–æ. –°–µ—Ä–≤–µ—Ä OpenAI –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      }
      
      if (error.message.includes('401')) {
        throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á OpenAI. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.');
      }
      
      if (error.message.includes('429')) {
        throw new Error('–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      }
      
      if (error.message.includes('quota')) {
        throw new Error('–ò—Å—á–µ—Ä–ø–∞–Ω –ª–∏–º–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è API OpenAI.');
      }
      
      if (error.message.includes('500')) {
        throw new Error('–°–µ—Ä–≤–µ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞ OpenAI. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —É–º–µ–Ω—å—à–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –ø—Ä–æ–º–ø—Ç–∞.');
      }
      
      if (error.message.includes('503')) {
        throw new Error('–°–µ—Ä–≤–∏—Å OpenAI –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      }

      throw error;
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Å–∞–π—Ç–∞
   * @param {string} prompt - –ü—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–ª–Ω–æ–≥–æ —Å–∞–π—Ç–∞
   * @returns {Promise<string>} - –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
   */
  async generateFullSite(prompt) {
    return this.sendRequest(prompt, 'FULL_SITE');
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å–µ–∫—Ü–∏–∏
   * @param {string} prompt - –ü—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–µ–∫—Ü–∏–∏
   * @returns {Promise<string>} - –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
   */
  async generateSection(prompt) {
    return this.sendRequest(prompt, 'SECTION');
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∞–≤–æ–≤—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
   * @param {string} prompt - –ü—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∞–≤–æ–≤—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
   * @returns {Promise<string>} - –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
   */
  async generateLegalDocuments(prompt) {
    return this.sendRequest(prompt, 'LEGAL');
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
   * @returns {Promise<boolean>} - –î–æ—Å—Ç—É–ø–µ–Ω –ª–∏ API
   */
  async checkConnection() {
    try {
      const testPrompt = '–û—Ç–≤–µ—Ç—å—Ç–µ –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º: "–†–∞–±–æ—Ç–∞–µ—Ç"';
      const response = await this.sendRequest(testPrompt, 'SECTION');
      return response.toLowerCase().includes('—Ä–∞–±–æ—Ç–∞–µ—Ç') || response.toLowerCase().includes('works');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å OpenAI:', error);
      return false;
    }
  }
}

// –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
const openaiService = new OpenAIService();
export default openaiService;